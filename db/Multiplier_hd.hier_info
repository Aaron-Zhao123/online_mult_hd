|Multiplier_hd
x_value[0] => x_value[0].IN1
x_value[1] => x_value[1].IN1
y_value[0] => y_value[0].IN1
y_value[1] => y_value[1].IN1
p_value[0] <= <GND>
p_value[1] <= <GND>
clk => clk.IN3
asyn_reset => asyn_reset.IN2
data_x_vld => data_x_vld.IN1
data_x_rdy <= computation_control_hd:FSM.port10
data_y_vld => data_y_vld.IN1
data_y_rdy <= computation_control_hd:FSM.port12
data_out_vld <= computation_control_hd:FSM.port13
data_out_rdy => data_out_rdy.IN1


|Multiplier_hd|generate_CA_reg_hd:CA_reg
comp_cycle[0] => rd_addr[0].IN4
comp_cycle[1] => rd_addr[1].IN4
comp_cycle[2] => rd_addr[2].IN4
comp_cycle[3] => rd_addr[3].IN4
comp_cycle[4] => rd_addr[4].IN4
comp_cycle[5] => rd_addr[5].IN4
comp_cycle[6] => rd_addr[6].IN4
x_value[0] => tmp_write[2].IN4
x_value[1] => tmp_write[3].IN4
y_value[0] => tmp_write[0].IN4
y_value[1] => tmp_write[1].IN4
x_plus[0] <= single_clk_ram_4bit:ram4.port5
x_plus[1] <= single_clk_ram_4bit:ram3.port5
x_plus[2] <= single_clk_ram_4bit:ram2.port5
x_plus[3] <= single_clk_ram_4bit:ram1.port5
x_minus[0] <= single_clk_ram_4bit:ram4.port5
x_minus[1] <= single_clk_ram_4bit:ram3.port5
x_minus[2] <= single_clk_ram_4bit:ram2.port5
x_minus[3] <= single_clk_ram_4bit:ram1.port5
y_plus[0] <= single_clk_ram_4bit:ram4.port5
y_plus[1] <= single_clk_ram_4bit:ram3.port5
y_plus[2] <= single_clk_ram_4bit:ram2.port5
y_plus[3] <= single_clk_ram_4bit:ram1.port5
y_minus[0] <= single_clk_ram_4bit:ram4.port5
y_minus[1] <= single_clk_ram_4bit:ram3.port5
y_minus[2] <= single_clk_ram_4bit:ram2.port5
y_minus[3] <= single_clk_ram_4bit:ram1.port5
clk => clk.IN4
master_cnt[0] => Decoder0.IN1
master_cnt[0] => Decoder1.IN1
master_cnt[0] => Decoder2.IN1
master_cnt[0] => Decoder3.IN1
master_cnt[1] => Decoder0.IN0
master_cnt[1] => Decoder1.IN0
master_cnt[1] => Decoder2.IN0
master_cnt[1] => Decoder3.IN0
master_cnt[2] => wr_addr[0].IN4
master_cnt[3] => wr_addr[1].IN4
master_cnt[4] => wr_addr[2].IN4
master_cnt[5] => wr_addr[3].IN4
master_cnt[6] => wr_addr[4].IN4
master_cnt[7] => wr_addr[5].IN4
master_cnt[8] => wr_addr[6].IN4
enable_all => always0.IN0
wr_enable => always0.IN1


|Multiplier_hd|generate_CA_reg_hd:CA_reg|single_clk_ram_4bit:ram1
data[0] => mem.data_a[0].DATAIN
data[0] => mem.DATAIN
data[1] => mem.data_a[1].DATAIN
data[1] => mem.DATAIN1
data[2] => mem.data_a[2].DATAIN
data[2] => mem.DATAIN2
data[3] => mem.data_a[3].DATAIN
data[3] => mem.DATAIN3
write_addr[0] => mem.waddr_a[0].DATAIN
write_addr[0] => mem.WADDR
write_addr[1] => mem.waddr_a[1].DATAIN
write_addr[1] => mem.WADDR1
write_addr[2] => mem.waddr_a[2].DATAIN
write_addr[2] => mem.WADDR2
write_addr[3] => mem.waddr_a[3].DATAIN
write_addr[3] => mem.WADDR3
write_addr[4] => mem.waddr_a[4].DATAIN
write_addr[4] => mem.WADDR4
write_addr[5] => mem.waddr_a[5].DATAIN
write_addr[5] => mem.WADDR5
write_addr[6] => mem.waddr_a[6].DATAIN
write_addr[6] => mem.WADDR6
read_addr[0] => addr_reg[0].DATAIN
read_addr[1] => addr_reg[1].DATAIN
read_addr[2] => addr_reg[2].DATAIN
read_addr[3] => addr_reg[3].DATAIN
read_addr[4] => addr_reg[4].DATAIN
read_addr[5] => addr_reg[5].DATAIN
read_addr[6] => addr_reg[6].DATAIN
we => mem.we_a.DATAIN
we => mem.WE
clk => mem.we_a.CLK
clk => mem.waddr_a[6].CLK
clk => mem.waddr_a[5].CLK
clk => mem.waddr_a[4].CLK
clk => mem.waddr_a[3].CLK
clk => mem.waddr_a[2].CLK
clk => mem.waddr_a[1].CLK
clk => mem.waddr_a[0].CLK
clk => mem.data_a[3].CLK
clk => mem.data_a[2].CLK
clk => mem.data_a[1].CLK
clk => mem.data_a[0].CLK
clk => addr_reg[0].CLK
clk => addr_reg[1].CLK
clk => addr_reg[2].CLK
clk => addr_reg[3].CLK
clk => addr_reg[4].CLK
clk => addr_reg[5].CLK
clk => addr_reg[6].CLK
clk => mem.CLK0
q[0] <= mem.DATAOUT
q[1] <= mem.DATAOUT1
q[2] <= mem.DATAOUT2
q[3] <= mem.DATAOUT3


|Multiplier_hd|generate_CA_reg_hd:CA_reg|single_clk_ram_4bit:ram2
data[0] => mem.data_a[0].DATAIN
data[0] => mem.DATAIN
data[1] => mem.data_a[1].DATAIN
data[1] => mem.DATAIN1
data[2] => mem.data_a[2].DATAIN
data[2] => mem.DATAIN2
data[3] => mem.data_a[3].DATAIN
data[3] => mem.DATAIN3
write_addr[0] => mem.waddr_a[0].DATAIN
write_addr[0] => mem.WADDR
write_addr[1] => mem.waddr_a[1].DATAIN
write_addr[1] => mem.WADDR1
write_addr[2] => mem.waddr_a[2].DATAIN
write_addr[2] => mem.WADDR2
write_addr[3] => mem.waddr_a[3].DATAIN
write_addr[3] => mem.WADDR3
write_addr[4] => mem.waddr_a[4].DATAIN
write_addr[4] => mem.WADDR4
write_addr[5] => mem.waddr_a[5].DATAIN
write_addr[5] => mem.WADDR5
write_addr[6] => mem.waddr_a[6].DATAIN
write_addr[6] => mem.WADDR6
read_addr[0] => addr_reg[0].DATAIN
read_addr[1] => addr_reg[1].DATAIN
read_addr[2] => addr_reg[2].DATAIN
read_addr[3] => addr_reg[3].DATAIN
read_addr[4] => addr_reg[4].DATAIN
read_addr[5] => addr_reg[5].DATAIN
read_addr[6] => addr_reg[6].DATAIN
we => mem.we_a.DATAIN
we => mem.WE
clk => mem.we_a.CLK
clk => mem.waddr_a[6].CLK
clk => mem.waddr_a[5].CLK
clk => mem.waddr_a[4].CLK
clk => mem.waddr_a[3].CLK
clk => mem.waddr_a[2].CLK
clk => mem.waddr_a[1].CLK
clk => mem.waddr_a[0].CLK
clk => mem.data_a[3].CLK
clk => mem.data_a[2].CLK
clk => mem.data_a[1].CLK
clk => mem.data_a[0].CLK
clk => addr_reg[0].CLK
clk => addr_reg[1].CLK
clk => addr_reg[2].CLK
clk => addr_reg[3].CLK
clk => addr_reg[4].CLK
clk => addr_reg[5].CLK
clk => addr_reg[6].CLK
clk => mem.CLK0
q[0] <= mem.DATAOUT
q[1] <= mem.DATAOUT1
q[2] <= mem.DATAOUT2
q[3] <= mem.DATAOUT3


|Multiplier_hd|generate_CA_reg_hd:CA_reg|single_clk_ram_4bit:ram3
data[0] => mem.data_a[0].DATAIN
data[0] => mem.DATAIN
data[1] => mem.data_a[1].DATAIN
data[1] => mem.DATAIN1
data[2] => mem.data_a[2].DATAIN
data[2] => mem.DATAIN2
data[3] => mem.data_a[3].DATAIN
data[3] => mem.DATAIN3
write_addr[0] => mem.waddr_a[0].DATAIN
write_addr[0] => mem.WADDR
write_addr[1] => mem.waddr_a[1].DATAIN
write_addr[1] => mem.WADDR1
write_addr[2] => mem.waddr_a[2].DATAIN
write_addr[2] => mem.WADDR2
write_addr[3] => mem.waddr_a[3].DATAIN
write_addr[3] => mem.WADDR3
write_addr[4] => mem.waddr_a[4].DATAIN
write_addr[4] => mem.WADDR4
write_addr[5] => mem.waddr_a[5].DATAIN
write_addr[5] => mem.WADDR5
write_addr[6] => mem.waddr_a[6].DATAIN
write_addr[6] => mem.WADDR6
read_addr[0] => addr_reg[0].DATAIN
read_addr[1] => addr_reg[1].DATAIN
read_addr[2] => addr_reg[2].DATAIN
read_addr[3] => addr_reg[3].DATAIN
read_addr[4] => addr_reg[4].DATAIN
read_addr[5] => addr_reg[5].DATAIN
read_addr[6] => addr_reg[6].DATAIN
we => mem.we_a.DATAIN
we => mem.WE
clk => mem.we_a.CLK
clk => mem.waddr_a[6].CLK
clk => mem.waddr_a[5].CLK
clk => mem.waddr_a[4].CLK
clk => mem.waddr_a[3].CLK
clk => mem.waddr_a[2].CLK
clk => mem.waddr_a[1].CLK
clk => mem.waddr_a[0].CLK
clk => mem.data_a[3].CLK
clk => mem.data_a[2].CLK
clk => mem.data_a[1].CLK
clk => mem.data_a[0].CLK
clk => addr_reg[0].CLK
clk => addr_reg[1].CLK
clk => addr_reg[2].CLK
clk => addr_reg[3].CLK
clk => addr_reg[4].CLK
clk => addr_reg[5].CLK
clk => addr_reg[6].CLK
clk => mem.CLK0
q[0] <= mem.DATAOUT
q[1] <= mem.DATAOUT1
q[2] <= mem.DATAOUT2
q[3] <= mem.DATAOUT3


|Multiplier_hd|generate_CA_reg_hd:CA_reg|single_clk_ram_4bit:ram4
data[0] => mem.data_a[0].DATAIN
data[0] => mem.DATAIN
data[1] => mem.data_a[1].DATAIN
data[1] => mem.DATAIN1
data[2] => mem.data_a[2].DATAIN
data[2] => mem.DATAIN2
data[3] => mem.data_a[3].DATAIN
data[3] => mem.DATAIN3
write_addr[0] => mem.waddr_a[0].DATAIN
write_addr[0] => mem.WADDR
write_addr[1] => mem.waddr_a[1].DATAIN
write_addr[1] => mem.WADDR1
write_addr[2] => mem.waddr_a[2].DATAIN
write_addr[2] => mem.WADDR2
write_addr[3] => mem.waddr_a[3].DATAIN
write_addr[3] => mem.WADDR3
write_addr[4] => mem.waddr_a[4].DATAIN
write_addr[4] => mem.WADDR4
write_addr[5] => mem.waddr_a[5].DATAIN
write_addr[5] => mem.WADDR5
write_addr[6] => mem.waddr_a[6].DATAIN
write_addr[6] => mem.WADDR6
read_addr[0] => addr_reg[0].DATAIN
read_addr[1] => addr_reg[1].DATAIN
read_addr[2] => addr_reg[2].DATAIN
read_addr[3] => addr_reg[3].DATAIN
read_addr[4] => addr_reg[4].DATAIN
read_addr[5] => addr_reg[5].DATAIN
read_addr[6] => addr_reg[6].DATAIN
we => mem.we_a.DATAIN
we => mem.WE
clk => mem.we_a.CLK
clk => mem.waddr_a[6].CLK
clk => mem.waddr_a[5].CLK
clk => mem.waddr_a[4].CLK
clk => mem.waddr_a[3].CLK
clk => mem.waddr_a[2].CLK
clk => mem.waddr_a[1].CLK
clk => mem.waddr_a[0].CLK
clk => mem.data_a[3].CLK
clk => mem.data_a[2].CLK
clk => mem.data_a[1].CLK
clk => mem.data_a[0].CLK
clk => addr_reg[0].CLK
clk => addr_reg[1].CLK
clk => addr_reg[2].CLK
clk => addr_reg[3].CLK
clk => addr_reg[4].CLK
clk => addr_reg[5].CLK
clk => addr_reg[6].CLK
clk => mem.CLK0
q[0] <= mem.DATAOUT
q[1] <= mem.DATAOUT1
q[2] <= mem.DATAOUT2
q[3] <= mem.DATAOUT3


|Multiplier_hd|counter:master_counter
enable => cnt.OUTPUTSELECT
enable => cnt.OUTPUTSELECT
enable => cnt.OUTPUTSELECT
enable => cnt.OUTPUTSELECT
enable => cnt.OUTPUTSELECT
enable => cnt.OUTPUTSELECT
enable => cnt.OUTPUTSELECT
enable => cnt.OUTPUTSELECT
enable => cnt.OUTPUTSELECT
clk => cnt[0]~reg0.CLK
clk => cnt[1]~reg0.CLK
clk => cnt[2]~reg0.CLK
clk => cnt[3]~reg0.CLK
clk => cnt[4]~reg0.CLK
clk => cnt[5]~reg0.CLK
clk => cnt[6]~reg0.CLK
clk => cnt[7]~reg0.CLK
clk => cnt[8]~reg0.CLK
clk => STATE.CLK
cnt[0] <= cnt[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt[1] <= cnt[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt[2] <= cnt[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt[3] <= cnt[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt[4] <= cnt[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt[5] <= cnt[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt[6] <= cnt[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt[7] <= cnt[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt[8] <= cnt[8]~reg0.DB_MAX_OUTPUT_PORT_TYPE
asyn_reset => cnt[0]~reg0.ACLR
asyn_reset => cnt[1]~reg0.ACLR
asyn_reset => cnt[2]~reg0.ACLR
asyn_reset => cnt[3]~reg0.ACLR
asyn_reset => cnt[4]~reg0.ACLR
asyn_reset => cnt[5]~reg0.ACLR
asyn_reset => cnt[6]~reg0.ACLR
asyn_reset => cnt[7]~reg0.ACLR
asyn_reset => cnt[8]~reg0.ACLR
asyn_reset => STATE.ACLR


|Multiplier_hd|computation_control_hd:FSM
x_value[0] => x_value_reg.DATAB
x_value[1] => x_value_reg.DATAB
y_value[0] => y_value_reg.DATAB
y_value[1] => y_value_reg.DATAB
cnt_master[0] => ~NO_FANOUT~
cnt_master[1] => ~NO_FANOUT~
cnt_master[2] => computation_cycle.DATAB
cnt_master[3] => computation_cycle.DATAB
cnt_master[4] => computation_cycle.DATAB
cnt_master[5] => computation_cycle.DATAB
cnt_master[6] => computation_cycle.DATAB
cnt_master[7] => computation_cycle.DATAB
cnt_master[8] => computation_cycle.DATAB
clk => y_value_reg[0]~reg0.CLK
clk => y_value_reg[1]~reg0.CLK
clk => x_value_reg[0]~reg0.CLK
clk => x_value_reg[1]~reg0.CLK
clk => computation_cycle[0]~reg0.CLK
clk => computation_cycle[1]~reg0.CLK
clk => computation_cycle[2]~reg0.CLK
clk => computation_cycle[3]~reg0.CLK
clk => computation_cycle[4]~reg0.CLK
clk => computation_cycle[5]~reg0.CLK
clk => computation_cycle[6]~reg0.CLK
clk => hd_z.CLK
clk => hd_y.CLK
clk => hd_x.CLK
clk => STATE[0]~reg0.CLK
clk => STATE[1]~reg0.CLK
clk => STATE[2]~reg0.CLK
computation_cycle[0] <= computation_cycle[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
computation_cycle[1] <= computation_cycle[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
computation_cycle[2] <= computation_cycle[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
computation_cycle[3] <= computation_cycle[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
computation_cycle[4] <= computation_cycle[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
computation_cycle[5] <= computation_cycle[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
computation_cycle[6] <= computation_cycle[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
write_enable <= write_enable.DB_MAX_OUTPUT_PORT_TYPE
STATE[0] <= STATE[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
STATE[1] <= STATE[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
STATE[2] <= STATE[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
enable_all <= enable_all.DB_MAX_OUTPUT_PORT_TYPE
asyn_reset => data_x_rdy.OUTPUTSELECT
asyn_reset => data_y_rdy.OUTPUTSELECT
asyn_reset => enable_all.OUTPUTSELECT
asyn_reset => write_enable.OUTPUTSELECT
asyn_reset => data_out_vld.OUTPUTSELECT
asyn_reset => y_value_reg[0]~reg0.ACLR
asyn_reset => y_value_reg[1]~reg0.ACLR
asyn_reset => x_value_reg[0]~reg0.ACLR
asyn_reset => x_value_reg[1]~reg0.ACLR
asyn_reset => computation_cycle[0]~reg0.ACLR
asyn_reset => computation_cycle[1]~reg0.ACLR
asyn_reset => computation_cycle[2]~reg0.ACLR
asyn_reset => computation_cycle[3]~reg0.ACLR
asyn_reset => computation_cycle[4]~reg0.ACLR
asyn_reset => computation_cycle[5]~reg0.ACLR
asyn_reset => computation_cycle[6]~reg0.ACLR
asyn_reset => hd_z.ACLR
asyn_reset => hd_y.ACLR
asyn_reset => hd_x.ACLR
asyn_reset => STATE[0]~reg0.ACLR
asyn_reset => STATE[1]~reg0.ACLR
asyn_reset => STATE[2]~reg0.ACLR
data_x_vld => always0.IN1
data_x_rdy <= data_x_rdy.DB_MAX_OUTPUT_PORT_TYPE
data_y_vld => always0.IN1
data_y_rdy <= data_y_rdy.DB_MAX_OUTPUT_PORT_TYPE
data_out_vld <= data_out_vld.DB_MAX_OUTPUT_PORT_TYPE
data_out_rdy => always0.IN1
x_value_reg[0] <= x_value_reg[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_value_reg[1] <= x_value_reg[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_value_reg[0] <= y_value_reg[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_value_reg[1] <= y_value_reg[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE


